{"version":3,"sources":["components/todo-list/index.tsx","store/todos/actions.ts","hooks/use-text-input.ts","store/todos/reducer.ts","store/index.ts","components/app/index.tsx","serviceWorker.ts","index.tsx"],"names":["mapDispatchToProps","addTodoAction","todo","type","payload","id","v4","removeTodoAction","clearTodosAction","connect","state","todos","inputProps","onSubmit","useState","value","setValue","onChange","event","target","onKeyDown","key","useTextInput","content","onClick","map","initialState","rootReducer","combineReducers","action","concat","filter","store","createStore","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sOAUMA,EAAqB,CACzBC,cCPqB,SAACC,GAAD,MAAgC,CACrDC,KAAM,WACNC,QAAQ,2BACHF,GADE,IAELG,GAAIC,kBDINC,iBCAwB,SAACF,GAAD,MAA6B,CACrDF,KAAM,cACNC,QAASC,IDDTG,iBCIwB,iBAAmB,CAC3CL,KAAM,iBD0BOM,eAtCS,SAACC,GAAD,MAAmB,CACzCC,MAAOD,EAAMC,SAqCyBX,EAAzBS,EAxBS,SAAC,GAK0B,IAJjDE,EAIgD,EAJhDA,MACAV,EAGgD,EAHhDA,cACAM,EAEgD,EAFhDA,iBACAC,EACgD,EADhDA,iBAEQI,EExBkB,SAACC,GAAsC,IAAD,EACtCC,mBAAS,IAD6B,mBACzDC,EADyD,KAClDC,EADkD,KAahE,MAAO,CACLD,QACAH,WAAY,CACVK,SAba,SAACC,GAAD,OACfF,EAASE,EAAMC,OAAOJ,QAapBK,UAXc,SAACF,GACC,UAAdA,EAAMG,MACRR,EAASE,GACTC,EAAS,MASTD,QACAZ,KAAM,SFKamB,EAAa,SAAAC,GAAO,OAAItB,EAAc,CAAEsB,eAAvDX,WAER,OACE,oCACE,0BAAWA,GACX,4BAAQY,QAAS,kBAAMhB,MAAvB,sBACA,4BACGG,EAAMc,KAAI,SAAAvB,GAAI,OACb,wBAAImB,IAAKnB,EAAKG,IACXH,EAAKqB,QACN,4BAAQC,QAAS,kBAAMjB,EAAiBL,EAAKG,MAA7C,mB,OGjCNqB,EAAuB,GCAvBC,EAAcC,YAAgB,CAClCjB,MDC0B,WAA+C,IAA9CD,EAA6C,uDAArCgB,EAAcG,EAAuB,uCACxE,OAAQA,EAAO1B,MACb,IAAK,WACH,OAAOO,EAAMoB,OAAOD,EAAOzB,SAC7B,IAAK,cACH,OAAOM,EAAMqB,QAAO,gBAAG1B,EAAH,EAAGA,GAAH,OAAYwB,EAAOzB,UAAYC,KACrD,IAAK,cACH,MAAO,GACT,QACE,OAAOK,MCLAsB,EAAQC,YAAYN,GCElBO,EANH,kBACV,kBAAC,IAAD,CAAUF,MAAOA,GACf,kBAAC,EAAD,QCKgBG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d127b858.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Store } from \"../../store\";\r\nimport { addTodo, removeTodo, clearTodos } from \"../../store/todos/actions\";\r\nimport { useTextInput } from \"../../hooks/use-text-input\";\r\n\r\nconst mapStateToProps = (state: Store) => ({\r\n  todos: state.todos\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  addTodoAction: addTodo,\r\n  removeTodoAction: removeTodo,\r\n  clearTodosAction: clearTodos\r\n};\r\n\r\ntype TodoListStoreProps = ReturnType<typeof mapStateToProps>;\r\n\r\ntype TodoListDispatchProps = typeof mapDispatchToProps;\r\n\r\nexport const TodoList = ({\r\n  todos,\r\n  addTodoAction,\r\n  removeTodoAction,\r\n  clearTodosAction\r\n}: TodoListStoreProps & TodoListDispatchProps) => {\r\n  const { inputProps } = useTextInput(content => addTodoAction({ content }));\r\n\r\n  return (\r\n    <>\r\n      <input {...inputProps} />\r\n      <button onClick={() => clearTodosAction()}>üóëÔ∏è</button>\r\n      <ul>\r\n        {todos.map(todo => (\r\n          <li key={todo.id}>\r\n            {todo.content}\r\n            <button onClick={() => removeTodoAction(todo.id)}>‚úî</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList);\r\n","import { NewTodo } from \"./todo.type\";\r\nimport { TodoAction } from \"./action-types\";\r\nimport { v4 } from \"uuid\";\r\n\r\nexport const addTodo = (todo: NewTodo): TodoAction => ({\r\n  type: \"ADD_TODO\",\r\n  payload: {\r\n    ...todo,\r\n    id: v4()\r\n  }\r\n});\r\n\r\nexport const removeTodo = (id: string): TodoAction => ({\r\n  type: \"REMOVE_TODO\",\r\n  payload: id\r\n});\r\n\r\nexport const clearTodos = (): TodoAction => ({\r\n  type: \"CLEAR_TODOS\"\r\n});\r\n","import { useState } from \"react\";\r\n\r\nexport const useTextInput = (onSubmit: (value: string) => any) => {\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) =>\r\n    setValue(event.target.value);\r\n\r\n  const onKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (event.key === \"Enter\") {\r\n      onSubmit(value);\r\n      setValue(\"\");\r\n    }\r\n  };\r\n\r\n  return {\r\n    value,\r\n    inputProps: {\r\n      onChange,\r\n      onKeyDown,\r\n      value,\r\n      type: \"text\"\r\n    }\r\n  };\r\n};\r\n","import { Todo } from \"./todo.type\";\r\nimport { TodoAction } from \"./action-types\";\r\n\r\nconst initialState: Todo[] = [];\r\n\r\nexport const todosReducer = (state = initialState, action: TodoAction) => {\r\n  switch (action.type) {\r\n    case \"ADD_TODO\":\r\n      return state.concat(action.payload);\r\n    case \"REMOVE_TODO\":\r\n      return state.filter(({ id }) => action.payload !== id);\r\n    case \"CLEAR_TODOS\":\r\n      return [];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers, createStore } from \"redux\";\r\nimport { todosReducer } from \"./todos/reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  todos: todosReducer\r\n});\r\n\r\nexport type Store = ReturnType<typeof rootReducer>;\r\n\r\nexport const store = createStore(rootReducer);\r\n","import React from \"react\";\nimport TodoList from \"../todo-list\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"../../store\";\n\nconst App = () => (\n  <Provider store={store}>\n    <TodoList />\n  </Provider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/app\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}